package midterm;
import java.awt.*;
import simView.*;

public class efQproc extends ViewableDigraph {

	
	public efQproc()
	{
		super("efQproc");
		
		
		//atiomic 모델 선언 여기서는 프로세스 하나 밖에 없음 
		ViewableAtomic p1 = new sensor1("sensor1",20);  //processing_time = 20
		ViewableAtomic p2 = new sensor2("sensor2",30);
		ViewableAtomic p3 = new sensor3("sensor3",40);
		
		
		//다이그래프 선언 , int_arr_time = 15, observation time = 500
		ViewableDigraph ef = new ef("ef",15,1000);	//ef.java 에서 숫자를 변경해도 efp 가 더 상위개념이라 영향 없음. 
		
		//simulation view 에서 나오게 하기 , add() 는 atomic, digraph에 모두 적용되므로 용법 같음. 
	    add(p1);
	    add(p2);
	    add(p3);
	    add(ef); 
		
		//ef의 out과 Qproc의 in 연결 
	    addCoupling(ef,"out",p1, "in");
	    addCoupling(ef,"out",p2, "in");
	    addCoupling(ef,"out",p3, "in");
	    
	    //Qproc의 out과 ef 의 in 연결 
	    addCoupling(p1,"out",ef, "in");
	    addCoupling(p2,"out",ef, "in");
	    addCoupling(p3,"out",ef, "in");

		
	}
	
    
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(980, 655);
        ((ViewableComponent)withName("sensor3")).setPreferredLocation(new Point(714, 241));
        ((ViewableComponent)withName("sensor2")).setPreferredLocation(new Point(718, 139));
        ((ViewableComponent)withName("sensor1")).setPreferredLocation(new Point(728, 45));
        ((ViewableComponent)withName("ef")).setPreferredLocation(new Point(125, 37));
    }
}



